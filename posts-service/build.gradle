apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.1.6.RELEASE")
    }
}

group = 'com.deepakshankar'
version = '1.0.0-ALPHA'
sourceCompatibility = '1.8'
targetCompatibility = '1.8'

repositories {
    mavenCentral()
}

dependencies {
    compile project(':posts-model')
    compile project(':posts-schema')
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-starter-data-jpa")
    implementation("org.springframework.boot:spring-boot-starter-actuator")
    implementation 'org.springframework.restdocs:spring-restdocs-asciidoctor:2.0.3.RELEASE'
    testCompile("junit:junit")
    testCompile("org.springframework.boot:spring-boot-starter-test")
    testCompile 'org.springframework.restdocs:spring-restdocs-mockmvc:2.0.3.RELEASE'
}

ext {
    snippetsDir = file('build/generated-snippets')
}

test {
    outputs.dir snippetsDir
}

processResources {
    def branch, commit, dirty
    doFirst {
        branch = ['git', 'rev-parse', '--abbrev-ref', 'HEAD'].execute().text.trim()
        commit = ['git', 'rev-parse', 'HEAD'].execute().text.take(6)
        dirty = ['git', 'status', '--procelain'].execute().text.trim().isEmpty() ? '' : 'dirty'
    }
    filesMatching('**/*') {
        filter {
            it.replace('%APP_VERSION_TOKEN%', version)
                    .replace('%GIT_BRANCH_TOKEN%', branch)
                    .replace('%GIT_COMMIT_TOKEN%', commit)
                    .replace('%GIT_DIRTY_TOKEN%', dirty)
        }
    }
}

bootJar {
}

bootRun {
    systemProperties = ['spring.config.location' : "file:posts-service/src/main/resources/application.properties"]
}


