buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.1.6.RELEASE")
    }
}

plugins {
    id 'org.springframework.boot' version '2.1.6.RELEASE'
    id 'java'
    id "org.asciidoctor.convert" version "1.5.3"
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'com.deepakshankar'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'
targetCompatibility = '1.8'

repositories {
    mavenCentral()
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile 'mysql:mysql-connector-java'
    compile 'io.springfox:springfox-swagger2:2.9.2'
    compile 'io.springfox:springfox-swagger-ui:2.9.2'
    asciidoctor 'org.springframework.restdocs:spring-restdocs-asciidoctor:2.0.3.RELEASE'
    testCompile("junit:junit")
    testCompile 'org.springframework.restdocs:spring-restdocs-mockmvc:2.0.3.RELEASE'
}

ext {
    snippetsDir = file('build/generated-snippets')
}

test {
    outputs.dir snippetsDir
}

asciidoctor {
    inputs.dir snippetsDir
    dependsOn test
}

processResources {
    def branch, commit, dirty
    doFirst {
        branch = ['git', 'rev-parse', '--abbrev-ref', 'HEAD'].execute().text.trim()
        commit = ['git', 'rev-parse', 'HEAD'].execute().text.take(6)
        dirty = ['git', 'status', '--procelain'].execute().text.trim().isEmpty() ? '' : 'dirty'
    }
    filesMatching('**/*') {
        filter {
            it.replace('%APP_VERSION_TOKEN%', version)
            .replace('%GIT_BRANCH_TOKEN%', branch)
            .replace('%GIT_COMMIT_TOKEN%', commit)
            .replace('%GIT_DIRTY_TOKEN%', dirty)
        }
    }
}

bootRun {
    systemProperties = ['spring.config.location' : "file:src/main"]
}


